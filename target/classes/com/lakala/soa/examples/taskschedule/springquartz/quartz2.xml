<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:soa="http://www.lakala.com/schema/soa"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
	http://www.lakala.com/schema/soa http://www.lakala.com/schema/soa/soa.xsd">

	<!-- 作业不继承QuartzJobBean的方式  -->
	<bean id="job2"  class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">  
		<property name="targetObject">  
			<!-- <ref bean="myJob" /> --> 
			<bean class="com.lakala.soa.examples.taskschedule.springquartz.Job2" />  
		</property>  
		<property name="targetMethod" value="doJob2" />  
		<property name="concurrent" value="false" /><!-- 作业不并发调度 -->  
	</bean>
	
	<!-- quartz 在2.0 时,org.quartz.SimpleTrigger从class变成了一个interface -->
	
	<!-- quartz-1.8以前的配置 --> 
	<!-- <bean id="simpleTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean"> -->  
	
	<!-- quartz-2.x的配置 --> 
	<bean id="simpleTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean">  
		<property name="jobDetail" ref="job2" />  
		<property name="startDelay" value="0" /><!-- 调度工厂实例化后，经过0秒开始执行调度 -->  
		<property name="repeatInterval" value="2000" /><!-- 每2秒调度一次 -->  
		<property name="repeatCount" value="15" />
		<!-- *******************************misfireInstruction******************************* -->
		<!-- 
		>>> CronTrigger
		* constant in the {@link org.quartz.CronTrigger} class.
	    * Default is {@code MISFIRE_INSTRUCTION_SMART_POLICY}.
	 	* @see org.quartz.CronTrigger#MISFIRE_INSTRUCTION_FIRE_ONCE_NOW
	 	* @see org.quartz.CronTrigger#MISFIRE_INSTRUCTION_DO_NOTHING
	 	* @see org.quartz.Trigger#MISFIRE_INSTRUCTION_SMART_POLICY
		MISFIRE_INSTRUCTION_FIRE_ONCE_NOW = 1
		MISFIRE_INSTRUCTION_DO_NOTHING = 2
		MISFIRE_INSTRUCTION_SMART_POLICY = 0
		MISFIRE_INSTRUCTION_IGNORE_MISFIRE_POLICY = -1
		
		>>> SimpleTrigger
		* constant in the {@link org.quartz.SimpleTrigger} class.
		* Default is {@code MISFIRE_INSTRUCTION_SMART_POLICY}.
		* @see org.quartz.SimpleTrigger#MISFIRE_INSTRUCTION_FIRE_NOW
		* @see org.quartz.SimpleTrigger#MISFIRE_INSTRUCTION_RESCHEDULE_NEXT_WITH_EXISTING_COUNT
		* @see org.quartz.SimpleTrigger#MISFIRE_INSTRUCTION_RESCHEDULE_NEXT_WITH_REMAINING_COUNT
		* @see org.quartz.SimpleTrigger#MISFIRE_INSTRUCTION_RESCHEDULE_NOW_WITH_EXISTING_REPEAT_COUNT
		* @see org.quartz.SimpleTrigger#MISFIRE_INSTRUCTION_RESCHEDULE_NOW_WITH_REMAINING_REPEAT_COUNT
		* @see org.quartz.Trigger#MISFIRE_INSTRUCTION_SMART_POLICY 
		MISFIRE_INSTRUCTION_FIRE_NOW = 1
		MISFIRE_INSTRUCTION_RESCHEDULE_NOW_WITH_EXISTING_REPEAT_COUNT = 2
		MISFIRE_INSTRUCTION_RESCHEDULE_NOW_WITH_REMAINING_REPEAT_COUNT = 3
		MISFIRE_INSTRUCTION_RESCHEDULE_NEXT_WITH_REMAINING_COUNT = 4
		MISFIRE_INSTRUCTION_RESCHEDULE_NEXT_WITH_EXISTING_COUNT = 5 
		MISFIRE_INSTRUCTION_SMART_POLICY = 0
		MISFIRE_INSTRUCTION_IGNORE_MISFIRE_POLICY = -1 
		
		所有的trigger都有一个Trigger.MISFIRE_INSTRUCTION_SMART_POLICY策略可以使用，该策略也是所有trigger的默认策略。
		如果使用smart policy，SimpleTrigger会根据实例的配置及状态，在所有MISFIRE策略中动态选择一种Misfire策略。
		SimpleTrigger.updateAfterMisfire()的JavaDoc中解释了该动态行为的具体细节。
		>>> CronTrigger
		@see org.quartz.impl.triggers.CronTriggerImpl#updateAfterMisfire
		>>> SimpleTrigger
		@see org.quartz.impl.triggers.SimpleTriggerImpl#updateAfterMisfire
		-->
		<!-- *******************************misfireInstruction******************************* -->
		<property name="misfireInstruction" value="0"/>
	</bean> 
	
	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">  
		<!-- 默认：优先顺序 Classpath:quartz.properties -> org/quartz/quartz.properties (quartz lib) -->
		<!-- 改变默认：设置一个系统属性"org.quartz.properties"指向对应的properties文件 -->
		<property name="configLocation" value="com/lakala/soa/examples/taskschedule/springquartz/quartz.properties" />
		<property name="triggers">  
			<list>  
				<ref bean="simpleTrigger" />  
			</list>  
		</property>  
	</bean> 
    
</beans>
